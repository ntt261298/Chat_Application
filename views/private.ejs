<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
  <link rel="shortcut icon" HREF="favicon.ico">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" crossorigin="anonymous">
  <link rel="stylesheet" href="stylePrivate.css">
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.9/peer.min.js"></script>
  <script src="video.js"></script>
  <script>
    var socket = io("https://ntt261298.herokuapp.com");
    // var socket = io("localhost:8080");
    var from = "<%= user.username %>";
    var listFrameChat = [];
    var partnerList = [];
    var listQueue = [];
    var count = 0;
    var localStream, remoteStream;
    peer = new Peer({
      key: 'peerjs',
      host: 'chatapppeer.herokuapp.com',
      secure: true,
      port: 443,
      config: {
        "urls": [
        "turn:13.250.13.83:3478?transport=udp"
        ],
        "username": "YzYNCouZM1mhqhmseWk6",
        "credential": "YzYNCouZM1mhqhmseWk6"
      }
    });

    peer.on("open", peerID => {
      socket.emit("clientSendUser", from, peerID);
    });
    // Answer
    peer.on('call', call => {
      $("#calling").text(`${call.metadata} is calling...`);
      $("#calling").css("display", "block");
      $("#respondCall").css("display", "block");
      $("#rejectCall").css("display", "block");
      $("#rejectCall, #closeCall, #logout").on("click", e => {
        if(localStream){
          socket.emit("updateInCall",  from, call.metadata);
          call.close();
        }
        else{
          socket.emit("endCall", from, call.metadata);
          call.close();
          $("#out").css("display", "none");
        }
      })
      $("#respondCall").on("click", (e) => {
        $("#calling").css("display", "none");
        $("#respondCall").css("display", "none");
        $("#rejectCall").css("display", "none");
        $("#endCall").css("display", "block");
        openStream()
        .then(stream => {
          console.log(stream);
          call.answer(stream);
          playStream('localStream', stream);
          window.localStream = stream;
          call.on('stream', function(remoteStream) {
            playStream('remoteStream', remoteStream);
            console.log(remoteStream);
            remoteStream = remoteStream;
          })
        })
      })
      $("#endCall").on('click', () => {
        call.close();
      });
      call.on('close', () => {
        $("#endCall").css("display", "none");
        closeStream('localStream');
        socket.emit("updateInCall", from, call.metadata);
        $("#out").css("display", "none");
        alert('Call ended');
      })
    });
    socket.on("serverSendPublicMsg", (msg) => {
      $("#frame").append('<div style="margin: 1px;display: flex;flex-direction: row">' + msg.from + ': ' + '<div style="flex-direction: column;background: #75a3ef;color:white;border-radius: 12px;padding: 0 10px 0 10px;">'+ msg.msg + '</div></div>');
    })
    // Display list of users online
    socket.on("serverSendListUser", listUsers => {
      $("#users").html("");
      for(var i = 0; i < listUsers.length; i++){
        $("#users").append('<li id="' + listUsers[i] +'">' + listUsers[i] + '<div class="circle"></div></li>');
        //Scrolling messages
        var textDivUser = $("#users");
        textDivUser.scrollTop(textDivUser.prop('scrollHeight'));
        let y = $("#" + listUsers[i]);
        $("#" + listUsers[i]).click(() => {
          let partner = y.text();
          if(partner == from) return;
          if(!($("#" + from + "-" + partner).length)){
            var max;
            var containerWidth = $('.container').width();
            var userFrame = $('.user').width();
            var maxFrameChat = (containerWidth - userFrame-100)/225;
            if(containerWidth < 400) max = 1;
            else max = maxFrameChat;
            socket.emit("newFrame", from, partner, max);
          }
        })
      }
    })
    // Display public message
    socket.on("serverSendMessage", (from, msg)=> {
      $("#frame").append('<div style="margin: 1px;display: flex;flex-direction: row">' + from + ': ' + '<div style="flex-direction: column;background: #75a3ef;color:white;border-radius: 12px;padding: 0 10px 0 10px;">'+ msg + '</div></div>');
      //Scrolling messages
      var textdiv = $("#frame");
      textdiv.scrollTop(textdiv.prop('scrollHeight'));
    })

    $(document).ready(function(){
      $("#sendText").click(() => {
        var message = $("#textContent").val();
        if(message != ''){
          socket.emit("chatToAll", from,  message);
        }
        $("#textContent").val("");//The text in the input is overwritten to nothing.
        event.preventDefault();//Prevents the default action from happening.
      })
      // Display list of frame chat inbox
      socket.on("listFrameChat", (from, partner, func, max) => {
        var id = from + "-" + partner;
        if((listFrameChat.indexOf(id) >= 0) && (func == "push")) return;
        if(func == "close"){
          listFrameChat.splice(listFrameChat.indexOf(id), 1);
            console.dir("listFrameChat");
          partnerList.splice(partnerList.indexOf(partner), 1);
          count--;
        }
        if(func == "push"){
          listFrameChat.push(id);
          partnerList.push(partner);
          count++;
        }
        if(count <= max){
          $("#queue").attr('style','display: none !important;');
          $("#boxQueue").html("");
        }
        if(count > max){
          $("#queue").attr('style','display: block !important;');
          $("#boxQueue").html("");
          for(i = 0; (i < (count - max)) && (i>=0); i++){
            listQueue.push(listFrameChat[i]);
            $("#boxQueue").append('<li id="li' + listFrameChat[i] + '"><span class="toImpress" id="queue' + i + '">' + listFrameChat[i] + '</span>' + "<button type='button' class='close' aria-label='Close' style='height: 27px;'>"+
            "<span id='close" + listFrameChat[i] + "' aria-hidden='true'>&times;</span></button></<li></li>");
            let x = $("#queue" + i);
            $("#queue" + i).click(() => {
              var fromQueue = x.text();
              console.log(fromQueue);
              count--;//list chat length does'nt change
              partnerList.splice(listFrameChat.indexOf(fromQueue), 1);
              listFrameChat.splice(listFrameChat.indexOf(fromQueue), 1);
              socket.emit("fromQueue", from, fromQueue, max);
            })
          }
        }
        $("#frameInbox").html('');
        for(let i = (count-1); (i >= (count - max)) && (i>=0); i--){
          $("#frameInbox").append(function(){
            return "<div style='width: 225px;height: 200px;border: 1px solid black;float: left;margin-right: 10px;'>" +
                      "<div style='height: 30px;border-bottom: 1px solid black;background-color: #75a3ef; color: white;'>"+
                        "<span style='margin-left: 5px;'><strong>"+ partnerList[i] +"</strong></span>" +
                        "<button type='button' class='close' aria-label='Close' style='width: 35px;height: 27px;float:right'>"+
                        "<span id='close" + listFrameChat[i] + "' aria-hidden='true'>&times;</span></button>"+
                        "<button class='call' id='call"+ listFrameChat[i] +"' type='button' name='button' style='float:right !important;border:none;height:30px;background: transparent;'>" +
                            "<i class='fas fa-video'><div class='circle' id='circle" + listFrameChat[i] + "'></div></i>"+
                        "</button>"+
                      "</div>"+
                      "<div style='overflow-y:auto;height: 138px;border-bottom: 1px solid black;' id='"+ listFrameChat[i] +"'></div>"+
                      "<div><input id='msg" + listFrameChat[i]+ "' type='text' name='content' autocomplete='off' placeholder='text here'>" +
                      "<i class='fa fa-paper-plane' aria-hidden='true'></i></div></div>"
          })
          // Display message in database
          socket.emit("clientNeedMessage", from, listFrameChat[i]);
          $("#msg" + listFrameChat[i]).keypress((event) => {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
              var newMessage = $("#msg" + listFrameChat[i]).val();
              if(newMessage != ''){
                socket.emit("chatInbox", from, partnerList[i], listFrameChat[i], newMessage);
              }
              $("#msg" + listFrameChat[i]).val("");//The text in the input is overwritten to nothing.
              event.preventDefault();//Prevents the default action from happening.
            }
          })
          $(".fa-paper-plane").click(() => {
            var newMessage = $("#msg" + listFrameChat[i]).val();
            if(newMessage != ''){
              socket.emit("chatInbox", from, partnerList[i], listFrameChat[i], newMessage);
            }
            $("#msg" + listFrameChat[i]).val("");//The text in the input is overwritten to nothing.
            event.preventDefault();//Prevents the default action from happening.
          })
          $("#call" + listFrameChat[i]).click(() => {
            socket.emit("newCall", from, partnerList[i]);
            //$("#out").css("display", "block");
          })
        }
        for(let i = 0; i < count; i++){
          $("#close" + listFrameChat[i]).click(() => {
            console.log("test from client");
            socket.emit("closeFrame", from, partnerList[i], max);
          })
        }
      })
      socket.on("serverSendPrivateMsg", (from, to, msg, id) => {
        if(from == "<%= user.username %>"){
          $("#" + id).append('<div style="margin: 1px;display: flex;flex-direction: row-reverse"><div style="flex-direction: column;background: #75a3ef;color:white;border-radius: 12px;padding: 0 10px 0 10px;">'+ msg + '</div></div>');
          $("#" + to + "-" + from).append('<div style="margin:1px;display: flex;flex-direction: row-reverse"><div style="flex-direction: column;background: #75a3ef;color:white;border-radius: 12px;padding: 0 10px 0 10px;">'+ msg + '</div></div>');
        }
        else {
          $("#" + id).append('<div style="margin: 1px;display: flex;flex-direction: row">' + from + ' <div style="flex-direction: column;background: #d5dce8;border-radius: 12px;padding: 0 10px 0 10px;">'+ msg + '</div></div>');
          $("#" + to + "-" + from).append('<div style="margin:1px;display: flex;flex-direction: row">' + from + ' <div style="flex-direction: column;background: #d5dce8;border-radius: 12px;padding: 0 10px 0 10px;">'+ msg + '</div></div>');
        }
        //Scrolling messages
        let textDivSend = $("#" + id);
        textDivSend.scrollTop(textDivSend.prop('scrollHeight'));
        var textDivReceive = $("#" + to + "-" + from);
        textDivReceive.scrollTop(textDivReceive.prop('scrollHeight'));
      })
      socket.on("serverSendMsg", (from, msg, id) => {
        console.log(msg);
        $("#" + id).append('<div style="margin: 1px;display: flex;flex-direction: row-reverse"><div style="flex-direction: column;background: #75a3ef;color:white;border-radius: 12px;padding: 0 10px 0 10px;">'+ msg + '</div></div>');
      });
      socket.on("receiveSendMsg", (from, msg, to) => {
        let id = to + "-" + from;
        if(listQueue.indexOf(id) >= 0){
          $("#li" + id).css("background-color", "red");
        }
        $("#" + id).append('<div style="margin: 1px;display: flex;flex-direction: row">' + from + ' <div style="flex-direction: column;background: #d5dce8;border-radius: 12px;padding: 0 10px 0 10px;">'+ msg + '</div></div>');
      });
      socket.on("displayVideo", () => {
        $("#out").css("display", "block");

      })
      socket.on("serverSendPeerId", (partner, peerID) => {
        $("#endCall").css("display", "block");
        $("#calling").text("Calling "+partner+"...");
        $("#calling").css("display", "block");
          // Call
          openStream().
          then(stream => {
            console.log(stream);
            playStream('localStream', stream);
            window.localStream = stream;
            const call = peer.call(peerID, stream, {metadata: "<%= user.username %>"});
            call.on('stream', function(remoteStream) {
              playStream('remoteStream', remoteStream);
              remoteStream = remoteStream;
              console.log(remoteStream);
              $("#calling").css("display", "none");
            });
            call.on('close', () => {
              $("#endCall").css("display", "none");
              closeStream('localStream');
              $("#out").css("display", "none");
              alert(`Call ended`);
            });
            socket.on("closeStream", (from) => {
              call.close();
              socket.emit("updateInCall", from, call.metadata);
              closeStream('localStream');
              alert(`${from} declined your call`);
              $("#out").css("display", "none");
            })
            // Button endCall event
            $("#endCall, #closeCall, #logout").on('click', () => {
              // If in call
              if(remoteStream){
                socket.emit("updateInCall", from, call.metadata);
                call.close();
              }
              // If other peer doesn't accept
              else{
                call.close();
                $("#endCall").css("display", "none");
                closeStream('localStream');
                $("#out").css("display", "none");
                socket.emit("closeCall", from, partner);
              }
            });
          })
      })
      socket.on("hideOut", () => {
        $("#out").css("display", "none");
      })
      socket.on("statusListCall", (listInCall, max) => {
        for(let i = (count-1); (i >= (count - max)) && (i>=0); i--){
          let index = listInCall.indexOf(partnerList[i]);
          console.dir(listInCall);
          console.log(index);
          if(index >= 0) {
            $("#circle" + listFrameChat[i]).css("background", "red");
          }
          else {
            $("#circle" + listFrameChat[i]).css("background", "#1ec22e");
            // $("#call" + listFrameChat[i]).prop("disabled", false);
          }
        }
      })
      $("#queueBtn").click(() => {
        $("#boxQueue").fadeToggle();
      })
    })
  </script>
  <title>Private</title>
</head>
<body>
  <div id="out">
    <div id="incall">
      <button type='button' class='close' aria-label='Close' style='width: 35px;height: 27px;float:right'>
        <span id='closeCall' aria-hidden='true'>&times;</span>
      </button>
      <video id="localStream" autoplay></video>
      <video id="remoteStream" autoplay></video>
      <p id="calling"></p>
      <button class="callBtn" id="respondCall">
        <i class="fa fa-phone"></i>
      </button>
      <button class="callBtn" id="endCall">
        <i class="fa fa-phone-slash"></i>
      </button>
      <button class="callBtn" id="rejectCall">
        <i class="fa fa-phone-slash"></i>
      </button>
    </div>
  </div>
  <div class="container">
    <div class="text-center">
      <h1>Welcome to my Chat box</h1>
    </div>
    <div class="row">
      <div class="col-6 col-md-9"></div>
      <div class="col-4 col-md-2">
        <p id="greeting">Hi <%= user.username %></p>
      </div>
      <div class="col-2 col-md-1">
        <a href="/logout" id="logout">logout</a>
      </div>
    </div>
    <div class="row">
      <div class="user col-4 col-md-3">
        <p id="userHeader"><strong>Users online</strong></p>
        <div id="users"></div>
      </div>
      <div class="col-8 col-md-9">
        <div id="frameInbox"></div>
        <div id="queue">
          <div>
            <button type="button" name="button" id="queueBtn">
              <i class="fas fa-envelope"></i>
            </button>
          </div>
          <div id="boxQueue">

          </div>
        </div>
      </div>
    </div>
    <div class="row" id="chatDiv">
      <div class="chatToAll col-xs-12 col-md-12" id="frame" style="height:200px; padding:15px; overflow-y:auto;">
      </div>
    </div>
    <div class="row input">
      <div class="col-md-10">
        <input type="text" name="content" autocomplete="off" class="type" id="textContent">
      </div>
      <div class="col-md-2">
        <button class="btn btn-default send" id="sendText" type="submit">Send</button>
      </div>
    </div>
  </div>
</body>
</html>
